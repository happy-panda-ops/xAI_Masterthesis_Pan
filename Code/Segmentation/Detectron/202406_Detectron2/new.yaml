{
  "dataloader":
    {
      "train":
        {
          "dataset": { "names": "wood_train", "_target_": "wood_train" },
          "mapper":
            {
              "is_train": True,
              "augmentations":
                [
                  {
                    "min_scale": 0.1,
                    "max_scale": 2.0,
                    "target_height": 1024,
                    "target_width": 1024,
                    "_target_": <class 'detectron2.data.transforms.augmentation_impl.ResizeScale'>,
                  },
                  {
                    "crop_size": [1024, 1024],
                    "_target_": <class 'detectron2.data.transforms.augmentation_impl.FixedSizeCrop'>,
                  },
                  {
                    "horizontal": True,
                    "_target_": <class 'detectron2.data.transforms.augmentation_impl.RandomFlip'>,
                  },
                ],
              "image_format": "BGR",
              "use_instance_mask": True,
              "_target_": <class 'detectron2.data.dataset_mapper.DatasetMapper'>,
              "recompute_boxes": True,
            },
          "total_batch_size": 16,
          "num_workers": 3,
          "_target_": "wood_train",
        },
      "test":
        {
          "dataset":
            {
              "names": "wood_val",
              "filter_empty": False,
              "_target_": "wood_val",
            },
          "mapper":
            {
              "is_train": False,
              "augmentations":
                [
                  {
                    "short_edge_length": 800,
                    "max_size": 1333,
                    "_target_": <class 'detectron2.data.transforms.augmentation_impl.ResizeShortestEdge'>,
                  },
                ],
              "image_format": "${...train.mapper.image_format}",
              "_target_": <class 'detectron2.data.dataset_mapper.DatasetMapper'>,
            },
          "num_workers": 4,
          "_target_": "wood_val",
        },
      "evaluator":
        {
          "dataset_name": "wood_test",
          "_target_": <class 'detectron2.evaluation.coco_evaluation.COCOEvaluator'>,
        },
    },
  "lr_multiplier":
    {
      "scheduler":
        {
          "values": [1.0, 0.1, 0.01],
          "milestones": [655556, 710184],
          "num_updates": 737500,
          "_target_": <class 'fvcore.common.param_scheduler.MultiStepParamScheduler'>,
        },
      "warmup_length": 0.002711864406779661,
      "warmup_factor": 0.067,
      "_target_": <class 'detectron2.solver.lr_scheduler.WarmupParamScheduler'>,
    },
  "model":
    {
      "backbone":
        {
          "bottom_up":
            {
              "stem":
                {
                  "in_channels": 3,
                  "out_channels": 64,
                  "norm": "SyncBN",
                  "_target_": <class 'detectron2.modeling.backbone.resnet.BasicStem'>,
                },
              "stages":
                {
                  "depth": 50,
                  "stride_in_1x1": True,
                  "norm": "SyncBN",
                  "_target_": <function ResNet.make_default_stages at 0x7f1c91c2fa60>,
                },
              "out_features": ["res2", "res3", "res4", "res5"],
              "_target_": <class 'detectron2.modeling.backbone.resnet.ResNet'>,
              "freeze_at": 0,
            },
          "in_features": "${.bottom_up.out_features}",
          "out_channels": 256,
          "top_block":
            {
              "_target_": <class 'detectron2.modeling.backbone.fpn.LastLevelMaxPool'>,
            },
          "_target_": <class 'detectron2.modeling.backbone.fpn.FPN'>,
          "norm": "SyncBN",
        },
      "proposal_generator":
        {
          "in_features": ["p2", "p3", "p4", "p5", "p6"],
          "head":
            {
              "in_channels": 256,
              "num_anchors": 3,
              "_target_": <class 'detectron2.modeling.proposal_generator.rpn.StandardRPNHead'>,
              "conv_dims": [-1, -1],
            },
          "anchor_generator":
            {
              "sizes": [[32], [64], [128], [256], [512]],
              "aspect_ratios": [0.5, 1.0, 2.0],
              "strides": [4, 8, 16, 32, 64],
              "offset": 0.0,
              "_target_": <class 'detectron2.modeling.anchor_generator.DefaultAnchorGenerator'>,
            },
          "anchor_matcher":
            {
              "thresholds": [0.3, 0.7],
              "labels": [0, -1, 1],
              "allow_low_quality_matches": True,
              "_target_": <class 'detectron2.modeling.matcher.Matcher'>,
            },
          "box2box_transform":
            {
              "weights": [1.0, 1.0, 1.0, 1.0],
              "_target_": <class 'detectron2.modeling.box_regression.Box2BoxTransform'>,
            },
          "batch_size_per_image": 256,
          "positive_fraction": 0.5,
          "pre_nms_topk": [2000, 1000],
          "post_nms_topk": [1000, 1000],
          "nms_thresh": 0.7,
          "_target_": <class 'detectron2.modeling.proposal_generator.rpn.RPN'>,
        },
      "roi_heads":
        {
          "num_classes": 3,
          "batch_size_per_image": 512,
          "positive_fraction": 0.25,
          "proposal_matcher":
            {
              "thresholds": [0.5],
              "labels": [0, 1],
              "allow_low_quality_matches": False,
              "_target_": <class 'detectron2.modeling.matcher.Matcher'>,
            },
          "box_in_features": ["p2", "p3", "p4", "p5"],
          "box_pooler":
            {
              "output_size": 7,
              "scales": [0.25, 0.125, 0.0625, 0.03125],
              "sampling_ratio": 0,
              "pooler_type": "ROIAlignV2",
              "_target_": <class 'detectron2.modeling.poolers.ROIPooler'>,
            },
          "box_head":
            {
              "input_shape":
                { "channels": 256, "height": 7, "width": 7, "stride": None },
              "conv_dims": [256, 256, 256, 256],
              "fc_dims": [1024],
              "_target_": <class 'detectron2.modeling.roi_heads.box_head.FastRCNNConvFCHead'>,
              "conv_norm": <function <lambda> at 0x7f1c919ab380>,
            },
          "box_predictor":
            {
              "input_shape":
                {
                  "channels": 1024,
                  "height": None,
                  "width": None,
                  "stride": None,
                },
              "test_score_thresh": 0.05,
              "box2box_transform":
                {
                  "weights": [10, 10, 5, 5],
                  "_target_": <class 'detectron2.modeling.box_regression.Box2BoxTransform'>,
                },
              "num_classes": "${..num_classes}",
              "_target_": <class 'detectron2.modeling.roi_heads.fast_rcnn.FastRCNNOutputLayers'>,
            },
          "mask_in_features": ["p2", "p3", "p4", "p5"],
          "mask_pooler":
            {
              "output_size": 14,
              "scales": [0.25, 0.125, 0.0625, 0.03125],
              "sampling_ratio": 0,
              "pooler_type": "ROIAlignV2",
              "_target_": <class 'detectron2.modeling.poolers.ROIPooler'>,
            },
          "mask_head":
            {
              "input_shape":
                { "channels": 256, "height": 14, "width": 14, "stride": None },
              "num_classes": "${..num_classes}",
              "conv_dims": [256, 256, 256, 256, 256],
              "_target_": <class 'detectron2.modeling.roi_heads.mask_head.MaskRCNNConvUpsampleHead'>,
              "conv_norm": <function <lambda> at 0x7f1c919ab380>,
            },
          "_target_": <class 'detectron2.modeling.roi_heads.roi_heads.StandardROIHeads'>,
        },
      "pixel_mean": [103.53, 116.28, 123.675],
      "pixel_std": [1.0, 1.0, 1.0],
      "input_format": "BGR",
      "_target_": <class 'detectron2.modeling.meta_arch.rcnn.GeneralizedRCNN'>,
    },
  "optimizer":
    {
      "params":
        {
          "weight_decay_norm": 0.0,
          "_target_": <function get_default_optimizer_params at 0x7f1c9198e8e0>,
        },
      "lr": 0.00025,
      "momentum": 0.9,
      "weight_decay": 4e-05,
      "_target_": <class 'torch.optim.sgd.SGD'>,
    },
  "train":
    {
      "output_dir": "/home/jpan/xAI_Masterthesis_Pan/Code/Segmentation/Detectron/202406_Detectron2/r50_400_test_1_0618_server",
      "init_checkpoint": "",
      "max_iter": 10,
      "amp": { "enabled": True },
      "ddp":
        {
          "broadcast_buffers": False,
          "find_unused_parameters": False,
          "fp16_compression": True,
        },
      "checkpointer": { "period": 5000, "max_to_keep": 100 },
      "eval_period": 5000,
      "log_period": 20,
      "device": "cuda",
    },
}
